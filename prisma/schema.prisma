// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User table 

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  password      String
  role          Role      
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Add these lines
  batchRecordsCreated     BatchRecord[] @relation("BatchRecordCreatedBy")
  batchRecordsUpdated     BatchRecord[] @relation("BatchRecordUpdatedBy")
  lineClearancesCreated   LineClearance[] @relation("LineClearanceCreatedBy")
  lineClearancesUpdated   LineClearance[] @relation("LineClearanceUpdatedBy")
  billOfMaterialsCreated  BillOfMaterials[] @relation("BillOfMaterialsCreatedBy")
  billOfMaterialsUpdated  BillOfMaterials[] @relation("BillOfMaterialsUpdatedBy")
}

enum Role {
  ADMIN
  PRODUCTION
  TEAM_LEADER
  QA
  LABELING
}


// in future, if we want to change the form fields, we can use versioning to track the changes
// we can use the version to determine which fields to display
// we can use additionalData to store the unexpected fields


// batch record(header)
model BatchRecord {
  id               Int      @id @default(autoincrement())
  version          Int      @default(1)
  name             String
  documentNumber   String
  revision         String
  date             DateTime
  family           String
  partPrefix       String
  partNumber       String
  description      String
  lotNumber        String
  manufactureDate  String
  additionalData   Json?
  lineClearances  LineClearance[]
  billOfMaterials BillOfMaterials[]
  // other forms

  createdAt        DateTime @default(now())
  createdBy        User     @relation("BatchRecordCreatedBy", fields: [createdById], references: [id])
  createdById      String
  updatedAt        DateTime @updatedAt
  updatedBy        User     @relation("BatchRecordUpdatedBy", fields: [updatedById], references: [id])
  updatedById      String
}

model LineClearance {
  id             Int         @id @default(autoincrement())
  version        Int         @default(1)
  batchRecord    BatchRecord @relation(fields: [batchRecordId], references: [id])
  batchRecordId  Int

  // Q1. The production line has been cleared of any/all parts or components not specified in the BOM
  productionLineCleared Boolean
  // Q2. There is only a SINGLE lot of any component present on the line
  singleLot Boolean
  // Q3. All working surfaces and equipment have been wiped down with 70% isopropyl alcohol and wipes. Daily operator duties will continue as per WI0002C.Â 
  equipmentCleaned Boolean

  additionalData   Json?

  // other fields
  createdAt        DateTime @default(now())
  createdBy        User     @relation("LineClearanceCreatedBy", fields: [createdById], references: [id])
  createdById      String
  updatedAt        DateTime @updatedAt
  updatedBy        User     @relation("LineClearanceUpdatedBy", fields: [updatedById], references: [id])
  updatedById      String
}

model BillOfMaterials {
  id             Int         @id @default(autoincrement())
  version        Int         @default(1)
  batchRecord    BatchRecord @relation(fields: [batchRecordId], references: [id])
  batchRecordId  Int
  // Add specific fields for BillOfMaterials
  additionalData   Json?
  // ... other fields
  createdAt        DateTime @default(now())
  createdBy        User     @relation("BillOfMaterialsCreatedBy", fields: [createdById], references: [id])
  createdById      String
  updatedAt        DateTime @updatedAt
  updatedBy        User     @relation("BillOfMaterialsUpdatedBy", fields: [updatedById], references: [id])
  updatedById      String
}

// Add other form models as needed